- Installare git sulla propria macchina.
- Accedere al proprio account GitHub e assicurarsi che la propria chiave RSA sia correttamente configurata.

COMANDI BASE:
git clone git@github.com:ppparadox/gladoctor.git		per clonare l'ultima revisione. Verrà creata una cartella.
git add <file1> [file2] 					per aggiungere file(s) sotto controllo di revisione.
git rm <file1> [file2] 						per eliminarli.
git mv <oldname> <newname> 					per rinominare un file.
git commit -am "COMMENTO" 					per rendere infine definitive le modifiche. Nel dubbio aggiungere il flag --dry-run che permette di vedere il risultato delle operazioni effettuate senza effettivamente applicarle. Il flag a è necessario poiché stiamo *aggiungendo* le modifiche effettuate all'indice. Non è necessario per comandi tipo 'git rm' o 'git mv'.

git push 												per inviare i cambiamenti a GitHub. Ciò non avviene mai automaticamente. La prima volta aggiungere il flag -u per aggiungere il riferimento upstream.

git status												per vedere commit in attesa, conflitti non risolti ed altre amenità.

-------------------------------------------
COME CREARE UN NUOVO RAMO DI SVILUPPO:
git branch NOMEBRANCH
git checkout NOMEBRANCH

Il primo comando crea un nuovo ramo di sviluppo indipendente da quello principale "stabile", il secondo lo rende attualmente in uso per le modifiche che verranno effettuate. Lanciando infatti 'git branch' il risultato sarà:
* NOMEBRANCH
  master

L'asterisco conferma che è quello il branch su cui si sta operando. Ricordarsi di controllare sempre dove si sta operando!
Effettuare a questo punto le modifiche necessarie, una volta terminato il lavoro lanciare
git commit -am "COMMENTO" (la flag a è importante).

Ancora una volta per inviare le modifiche in remoto a GitHub è necessario
git push origin NOMEBRANCH	#origin è il nome di default del repository remoto automaticamente generato quando si è fatto 'git clone'

Su GitHub apparirà quindi la nuova branch. Procedere con tutte le modifiche desiderate e se risultano soddisfacenti e pronte per essere integrate nel ramo "stabile" si può lanciare
git checkout master		#Per tornare al branch principale
git merge NOMEBRANCH	#Per inserire nel ramo principale le modifiche del ramo specificato
git push				#Per inviare le modifiche a GitHub

Oppure per eliminarla:
git branch -d NOMEBRANCH		#Eliminazione locale
git push origin :NOMEBRANCH		#Eliminazione remota
A volte può accadere che quando si effettua merge vengano rilevati dei conflitti. Git mostrerà dove e quali file presentano problemi e starà a voi risolverli manualmente. Una volta risolti bisogna ridare 'git add' per ognuno dei file problematici ed infine 'git commit'.
--------------------------------------------------

Istruzioni sintetiche per iniziare con un nuovo repo:
git config --global user.name "Nome Cognome"
git config --global user.email "mymail@blabla.com"

e clonare il repository localmente oppure...

mkdir FOLDERNAME
cd FOLDERNAME
git init
touch SOMEFILE
git add SOMEFILE
git commit -m "first commit"
git remote add origin git@github.com:USERNAME/REPONAME.git
git push -u origin master

